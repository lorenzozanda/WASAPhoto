openapi: 3.0.3
info: 
  title: WASAPhoto
  description: |- 
    This OpenAPI document describes the APIs required for the Project "WASAPhoto" 
    of the WASA exam of Sapienza University of Rome.
  version: 0.0.2
servers:
  - url: "http://localhost:3000"
tags:
  - name: login
    description: Operations related to the login action
  - name: user-profile
    description: Everything about user profile
  - name: photos
    description: Everything about photos
  - name: follow
    description: Operations related to the follow action
  - name: ban
    description: Operations related to the ban action
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              description: Object with the username property
              properties:
                username:
                  $ref: "#/components/schemas/username"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: Object that contains the user identifier returned
                properties:
                  userId:
                    description: The unique identifier of the User
                    type: integer
                    example: 12345678
      
                    
  /users/{userId}/username:
    put:
      security:
        - bearerAuthentication: []
      tags: ["user-profile"]
      summary: Set the username of the user
      description: |-
        Given the user id of the user who wants to set a new username, it sets the 
        the new username if the user exists
      operationId: setMyUserName
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              type: object
              description: Object with the username property
              properties:
                username:
                  $ref: "#/components/schemas/username"
        required: true
      responses:
        "204":
          description: Username successfully set
        "403": 
          description: Username chosen already exists
        "404":
          description: User not found
          
  /users/{userId}/photos/:
    get:
      security:
        - bearerAuthentication: []
      tags: ["photos"]
      summary: Get stream of photos of a user by user ID
      description: |-
        Given the user id, returns the stream of photos
      operationId: getMyStream
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          description: Stream of photos returned
          content:
            application/json:
              schema:
                type: array
                description: Array containing all the Photos of the Stream
                items:
                  $ref: "#/components/schemas/Photo"
                minItems: 0
                maxItems: 1000
        "404":
          description: User not found
          
    post:
      security:
        - bearerAuthentication: []
      tags: ["photos"]
      summary: Upload a new Photo on WASAPhoto
      description: |-
        Takes an image and returns a new Photo
      operationId: uploadPhoto
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      requestBody:
        description: Image to be uploaded
        content:
          image/png:
            schema:
              $ref: "#/components/schemas/image"
        required: true
      responses:
        "201":
          description: Photo succesfully uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          description: Invalid image
          
  /users/{userId}/photos/{photoId}:
    delete:
      security:
        - bearerAuthentication: []
      tags: ["photos"]
      summary: Delete a Photo uploaded on WASAPhoto
      description: |-
        Given the user id of the user that uploaded the photo and the photo id of the 
        photo itself, it deletes the photo from the stream of photos of the user
      operationId: deletePhoto
      parameters:
        - $ref: "#/components/parameters/userIdParam"
        - $ref: "#/components/parameters/photoIdParam"
      responses:
        "204":
          description: Photo successfully removed
        "404":
          description: User or Photo not found
      
          
  /users/{userId}/follow/{followId}:
    put:
      security:
        - bearerAuthentication: []
      tags: ["follow"]
      summary: Follow an existent user on WASAPhoto
      description: |-
        Given the id of the user who wants to follow another one (userId) and the
        id of the user who will be followed (followId), if they are actually 
        users of WASAPhoto, this method allows the follow action
      operationId: followUser
      parameters:
      - $ref: "#/components/parameters/userIdParam"
      - $ref: "#/components/parameters/followIdParam"
      responses:
        "204": 
          description: User successfully followed
        "404":
          description: User not found
          
    delete:
      security:
        - bearerAuthentication: []
      tags: ["follow"]
      summary: Unfollow an existent user on WASAPhoto
      description: |-
        Given the id of the user who wants to unfollow another one (userId) and the
        id of the user who will be unfollowed (followId), if they are actually 
        users of WASAPhoto and the user follows the other one, this method 
        allows the unfollow action
      operationId: unfollowUser
      parameters:
      - $ref: "#/components/parameters/userIdParam"
      - $ref: "#/components/parameters/followIdParam"
      responses:
        "204": 
          description: User successfully unfollowed
        "403":
          description: Cannot unfollow a user who wasn't be followed
        "404":
          description: User not found
  
  /users/{userId}:
    get:
      security:
        - bearerAuthentication: []
      tags: ["user-profile"]
      summary: Get user profile by user ID
      description: |-
        Given the user id, returns the user profile
      operationId: getUserProfile
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          description: User profile returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          
  /photos/{photoId}/likes/:
    post:
      security:
        - bearerAuthentication: []
      tags: ["photos"]
      summary: Like a photo
      description: |-
        Given the photo id, it creates a new Like
      operationId: likePhoto
      parameters:
        - $ref: "#/components/parameters/photoIdParam"
      responses:
        "201":
          description: Like succesfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like" 
        "404":
          description: Photo not found
          
  /photos/{photoId}/likes/{likeId}:
    delete:
      security:
        - bearerAuthentication: []
      tags: ["photos"]
      summary: Unlike a photo
      description: |-
        Given the photo id and a like id, deletes the Like with the like id 
        that corresponds to the one given
      operationId: unlikePhoto
      parameters:
        - $ref: "#/components/parameters/photoIdParam"
        - $ref: "#/components/parameters/likeIdParam"
      responses:
        "204":
          description: Removed successfully a like from the photo 
        "403":
          description: Like not existent, impossible to remove a non-existent like 
        "404":
          description: Photo not found
          
  /photos/{photoId}/comments/:
    post:
      security:
        - bearerAuthentication: []
      tags: ["photos"]
      summary: Comment a Photo
      description: |- 
        Given the photo id and a message, it creates a new Comment  
      operationId: commentPhoto
      parameters:
        - $ref: "#/components/parameters/photoIdParam"
      requestBody:
        description: Message of the Comment 
        content:
          application/json:
            schema:
              type: object
              description: Object that contains the message property
              properties:
                message:
                  $ref: "#/components/schemas/message"
        required: true
      responses:
        "201":
          description: Comment successfully posted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: Photo not found
          
  /photos/{photoId}/comments/{commentId}:
    delete:
      security:
        - bearerAuthentication: []
      tags: ["photos"]
      summary: Uncomment a Photo
      description: |- 
        Given the photo id and a comment id, deletes the Comment with the comment id 
        that corresponds to the one given
      operationId: uncommentPhoto
      parameters:
        - $ref: "#/components/parameters/photoIdParam"
        - $ref: "#/components/parameters/commentIdParam"
      responses:
        "204":
          description: Comment successfully removed
        "404":
          description: Photo or Comment not found
    
  /users/{userId}/ban/{banId}:
    put:
      security:
        - bearerAuthentication: []
      tags: ["ban"]
      summary: Ban a User
      description: |- 
        Given the id of the user who wants to ban another one (userId) and the
        id of the user to ban (banId), this method allows the ban operation, meaning
        that the banned user will no longer be able to visualize the user profile of
        the user who banned him
      operationId: banUser
      parameters:
      - $ref: "#/components/parameters/userIdParam"
      - $ref: "#/components/parameters/banIdParam"
      responses:
        "204": 
          description: "User successfully banned, he will no longer be able to visualize your profile"
        "404":
          description: User not found

    delete:
      security:
        - bearerAuthentication: []
      tags: ["ban"]
      summary: Unban a User
      description: |- 
        Given the id of the user who wants to unban another one (userId) and the
        id of the user to unban (banId), this method allows the unban operation 
        (only if the user was previously in the ban status), meaning that the 
        ex-banned user will be able to re-visualize the user profile of 
        the user who previously banned him
      operationId: unbanUser
      parameters:
      - $ref: "#/components/parameters/userIdParam"
      - $ref: "#/components/parameters/banIdParam"
      responses:
        "204": 
          description: "User successfully unbanned, he will be able to re-visualize your profile"
        "403":
          description: The user isn't banned
        "404":
          description: User not found
          
components:
  securitySchemes:
    bearerAuthentication:
      description: |-
        Bearer Authentication that uses the user identifier in place of the token
        that needs to be passed into the Authorization header
      type: http
      scheme: bearer
      
  parameters:
    userIdParam:
      name: userId
      description: The unique identifier of the User
      in: path
      required: true
      schema:
        type: integer
      example: 12345678
      
    followIdParam:
      name: followId
      description: Identifier of the user who will be followed/unfollowed
      in: path
      schema:
        type: integer
      example: 12345678
      required: true
      
    banIdParam:
      name: banId
      description: Identifier of the user who will be banned/unbanned
      in: path
      schema:
        type: integer
      example: 12345678
      required: true
      
    photoIdParam:
      name: photoId
      description: The unique identifier of the Photo
      in: path
      required: true
      schema:
        type: integer
      example: 567
      
    commentIdParam:
      name: commentId
      description: The unique identifier of the Comment
      in: path
      required: true
      schema:
        type: integer
      example: 11111111
      
    likeIdParam:
      name: likeId
      description: The unique identifier of the Like
      in: path
      required: true
      schema:
        type: integer
      example: 202
    
  schemas:
    User:
      description: This object represents a single User of WASAPhoto
      type: object
      properties:
        userId:
          description: The unique identifier of the User
          type: integer
          example: 12345678
          readOnly: true
        username:
          description: The username of the User
          type: string
          example: "Maria"
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        followers:
          description: List of all user id of users who follow the User
          type: array
          items: 
            type: integer
            example: 12345678
          minItems: 0
          maxItems: 10000
        numberOfFollowers:
          description: Number of users who follow the User
          type: integer
          example: 1
        following:
          description: List of all user id of users followed by the User
          type: array
          items: 
            type: integer
            example: 12345678
          minItems: 0
          maxItems: 10000
        numberOfFollowing:
          description: Number of users followed by the User
          type: integer
          example: 1
        photos:
          description: Stream of Photos uploaded by the User
          type: array
          items: 
            $ref: "#/components/schemas/Photo"
          minItems: 0
          maxItems: 1000
          
    username:
      description: The username of the User
      type: string
      example: "Maria"
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16
      
    Photo:
      description: This object represents a single Photo that can be uploaded by a User on WASAPhoto
      type: object
      properties:
        photoId:
          description: The unique identifier of the Photo
          type: integer
          example: 567
          readOnly: true
        image: 
          description: The image of the Photo 
          type: string
          format: binary
          minLength: 1
          maxLength: 999999
        date:
          description: Date that represents when the Photo was uploaded 
          type: string
          format: date-time
          example: "2020-07-21T17:32:28Z"
        likes:
          description: List of all likes added on the Photo
          type: array
          items:
            $ref: "#/components/schemas/Like"
          minItems: 0
          maxItems: 10000
        numberOflikes:
          description: Number of likes that the Photo has
          type: integer
          example: 1
        comments:
          description: List of all comments posted on the Photo
          type: array
          items:
            $ref: "#/components/schemas/Comment"
          minItems: 0
          maxItems: 10000
        numberOfComments: 
          description: Number of comments that the Photo has
          type: integer
          example: 1
          
    image:
      description: The image of the Photo 
      type: string
      format: binary
      minLength: 1
      maxLength: 999999
      
          
    Comment:
      description: This object represents a single Comment that can be posted by a User 
        on a Photo uploaded on WASAPhoto
      type: object
      properties:
        commentId:
          description: The unique identifier of the Comment
          type: integer
          example: 11111111
          readOnly: true
        userId:
          description: The unique identifier of the User who posted the Comment
          type: integer
          example: 12345678
          readOnly: true
        date:
          description: Date that represents when the Comment was posted 
          type: string
          format: date-time
          example: "2023-11-02T16:50:30Z"
          minLength: 20
          maxLength: 20
        message:
          description: The message of the Comment 
          type: string
          example: "This photo is amazing!"
          pattern: '^.*?$'
          minLength: 1
          maxLength: 2200
          
    message:
      description: The message of the Comment 
      type: string
      example: "This photo is amazing!"
      pattern: '^.*?$'
      minLength: 1
      maxLength: 2200 
          
    Like:
      description: This object represents a single Like that a User can add onto a Photo
        on WASAPhoto
      type: object
      properties:
        likeId:
          description: The unique identifier of the Like
          type: integer
          example: 202
          readOnly: true
        userId:
          description: The unique identifier of the User who added the Like
          type: integer
          example: 12345678
          readOnly: true
        date:
          description: Date that represents when the Like was added
          type: string
          format: date-time
          example: "2023-11-02T16:50:30Z"
          minLength: 20
          maxLength: 20
      
