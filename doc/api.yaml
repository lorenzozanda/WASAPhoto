openapi: 3.0.3
info: 
  title: WASAPhoto
  description: |- 
    This OpenAPI document describes the APIs required for the Project "WASAPhoto" 
    of the WASA exam of Sapienza University of Rome.
  version: 0.0.1
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "Maria"
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                    example: 1
                    
                    
  /users/{userId}/username:
    put:
      tags: ["user"]
      summary: Set the username of the User
      description: |-
        It sets a new username for the user if the user exists
      operationId: setMyUserName
      parameters:
      - name: userId
        description: Identifier of the user
        in: path
        schema:
          type: integer
          example: 1
        required: true
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "Maria"
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "204":
          description: "Username successfully set"
        "404":
          description: "User not found"
          
  /users/{userId}/photos:
    post:
      tags: ["user"]
      summary: Upload a new Photo on WASAPhoto
      description: |-
        Takes an image and returns a new Photo
      operationId: uploadPhoto
      parameters:
      - name: userId
        description: Identifier of the user
        in: path
        schema:
          type: integer
          example: 1
        required: true
      requestBody:
        description: Image to be uploaded
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "201":
          description: Photo succesfully uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          description: Invalid image
          
  /users/{userId}/following/{followingId}:
    put:
      tags: ["user"]
      summary: Follow an existent user on WASAPhoto
      description: |-
        Given the id of the user who wants to follow another one (userId) and the
        id of the user who will be followed (followingId), if they are actually 
        users of WASAPhoto, this method allows the follow action
      operationId: followUser
      parameters:
      - name: userId
        description: Identifier of the user who wants to follow
        in: path
        schema:
          type: integer
          example: 1234
        required: true
      - name: followingId
        description: Identifier of the user who will be followed
        in: path
        schema:
          type: integer
          example: 1234
        required: true
      responses:
        "204": 
          description: User successfully followed
        "404":
          description: User not found
    delete:
      tags: ["user"]
      summary: Unfollow an existent user on WASAPhoto
      description: |-
        Given the id of the user who wants to unfollow another one (userId) and the
        id of the user who will be unfollowed (followingId), if they are actually 
        users of WASAPhoto and the user follows the other one, this method 
        allows the unfollow action
      operationId: unfollowUser
      parameters:
      - name: userId
        description: Identifier of the user who wants to unfollow
        in: path
        schema:
          type: integer
          example: 1234
        required: true
      - name: followingId
        description: Identifier of the user who will be unfollowed
        in: path
        schema:
          type: integer
          example: 1234
        required: true
      responses:
        "204": 
          description: User successfully unfollowed
        "404":
          description: User not found
        
        
      
components:
  schemas:
    User:
      description: This object represents a single User of WASAPhoto
      type: object
      properties:
        userId:
          description: The unique identifier of the User
          type: integer
          example: 1234
          readOnly: true
        username:
          description: The username of the User
          type: string
          example: "Maria"
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        followers:
          description: List of all users who follow the User
          type: array
          items: 
            $ref: "#/components/schemas/User"
        following:
          description: List of all users followed by the User
          type: array
          items: 
            $ref: "#/components/schemas/User"
        photos:
          description: Stream of Photos uploaded by the User
          type: array
          items: 
            $ref: "#/components/schemas/Photo"
    Photo:
      description: This object represents a single Photo that can be uploaded by a User on WASAPhoto
      type: object
      properties:
        photoId:
          description: The unique identifier of the Photo
          type: integer
          example: 1234
          readOnly: true
        image: 
          description: The image of the Photo 
          type: string
          format: binary
        date:
          description: Date that represents when the Photo was uploaded 
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        likes:
          description: Number of likes that the Photo has
          type: integer
          example: 1
        comments: 
          description: Number of comments that the Photo has
          type: integer
          example: 1
        
      
      
          
          
          
