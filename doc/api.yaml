openapi: 3.0.3
info: 
  title: WASAPhoto
  description: |- 
    This OpenAPI document describes the APIs required for the Project "WASAPhoto" 
    of the WASA exam of Sapienza University of Rome.
  version: 0.0.1
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/Username"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    $ref: "#/components/schemas/UserID"
                    
  /users/{userId}/username:
    put:
      tags: ["user-profile"]
      summary: Set the username of the user
      description: |-
        It sets a new username for the user if the user exists
      operationId: setMyUserName
      parameters:
      - name: userId
        description: Identifier of the user who wants to modify the username
        in: path
        schema:
          $ref: "#/components/schemas/UserID" 
        required: true
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/Username" 
        required: true
      responses:
        "204":
          description: Username successfully set
        "403": 
          description: Username chosen already exists
        "404":
          description: User not found
          
  /users/{userId}/photos/:
    get:
      tags: ["photos"]
      summary: Get stream of photos of a user by user ID
      description: |-
        Given the user id, returns the stream of photos
      operationId: getMyStream
      parameters:
      - name: userId
        in: path
        schema: 
          $ref: "#/components/schemas/UserID"
        required: true
      responses:
        "200":
          description: Stream of photos returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Photo"
        "404":
          description: User not found
    post:
      tags: ["photos"]
      summary: Upload a new photo on WASAPhoto
      description: |-
        Takes an image and returns a new Photo
      operationId: uploadPhoto
      parameters:
      - name: userId
        description: Identifier of the user who wants to upload a photo
        in: path
        schema:
          $ref: "#/components/schemas/UserID" 
        required: true
      requestBody:
        description: Image to be uploaded
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "201":
          description: Photo succesfully uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          description: Invalid image
          
  /users/{userId}/following/{followingId}:
    put:
      tags: ["follow"]
      summary: Follow an existent user on WASAPhoto
      description: |-
        Given the id of the user who wants to follow another one (userId) and the
        id of the user who will be followed (followingId), if they are actually 
        users of WASAPhoto, this method allows the follow action
      operationId: followUser
      parameters:
      - name: userId
        description: Identifier of the user who wants to follow
        in: path
        schema:
          $ref: "#/components/schemas/UserID" 
        required: true
      - name: followingId
        description: Identifier of the user who will be followed
        in: path
        schema:
          $ref: "#/components/schemas/UserID" 
        required: true
      responses:
        "204": 
          description: User successfully followed
        "404":
          description: User not found
    delete:
      tags: ["follow"]
      summary: Unfollow an existent user on WASAPhoto
      description: |-
        Given the id of the user who wants to unfollow another one (userId) and the
        id of the user who will be unfollowed (followingId), if they are actually 
        users of WASAPhoto and the user follows the other one, this method 
        allows the unfollow action
      operationId: unfollowUser
      parameters:
      - name: userId
        description: Identifier of the user who wants to unfollow
        in: path
        schema:
          $ref: "#/components/schemas/UserID" 
        required: true
      - name: followingId
        description: Identifier of the user who will be unfollowed
        in: path
        schema:
          $ref: "#/components/schemas/UserID" 
        required: true
      responses:
        "204": 
          description: User successfully unfollowed
        "404":
          description: User not found
  
  /users/{userId}:
    get:
      tags: ["user-profile"]
      summary: Get user profile by user ID
      description: |-
        Given the user id, returns the user profile
      operationId: getUserProfile
      parameters:
      - name: userId
        in: path
        schema: 
          $ref: "#/components/schemas/UserID"
        required: true
      responses:
        "200":
          description: User profile returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          
  /photos/{photoId}/likes:
    put:
      tags: ["photos"]
      summary: Like a photo
      description: |-
        Given the photo id, it increments the number of likes that the photo currently has
      operationId: likePhoto
      parameters:
      - name: photoId
        in: path
        schema: 
          $ref: "#/components/schemas/PhotoID"
        required: true
      responses:
        "200":
          description: Added successfully a like to the photo 
        "404":
          description: Photo not found
    delete:
      tags: ["photos"]
      summary: Unlike a photo
      description: |-
        Given the photo id, it decrements the number of likes that the photo currently has
      operationId: unlikePhoto
      parameters:
      - name: photoId
        in: path
        schema: 
          $ref: "#/components/schemas/PhotoID"
        required: true
      responses:
        "200":
          description: Removed successfully a like from the photo 
        "403":
          description: Like not existent, impossible to remove a non-existent like 
        "404":
          description: Photo not found
          
  /photos/{photoId}/comments/:
    post:
      tags: ["photos"]
      summary: Comment a Photo
      description: |- 
        Given the photo id and a message, it creates a new Comment  
      operationId: commentPhoto
      parameters:
      - name: photoId
        in: path
        schema: 
          $ref: "#/components/schemas/PhotoID"
        required: true
      requestBody:
        description: Message of the Comment 
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "This photo is amazing!"
        required: true
      responses:
        "201":
          description: Comment successfully posted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: Photo not found
          
  /photos/{photoId}/comments/{commentId}:
    delete:
      tags: ["photos"]
      summary: Uncomment a Photo
      description: |- 
        Given the photo id and a comment id, deletes the Comment with the comment id 
        that corresponds to the one given
      operationId: uncommentPhoto
      parameters:
      - name: photoId
        in: path
        schema: 
          $ref: "#/components/schemas/PhotoID"
        required: true
      - name: commentId
        in: path
        schema: 
          $ref: "#/components/schemas/CommentID"
        required: true
      responses:
        "200":
          description: Comment successfully removed
        "404":
          description: Photo/comment not found
          
        
        
        
components:
  schemas:
    User:
      description: This object represents a single User of WASAPhoto
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UserID"
        username:
           $ref: "#/components/schemas/Username"
        followers:
          description: List of all users who follow the User
          type: array
          items: 
            $ref: "#/components/schemas/UserID"
        numberOfFollowers:
          type: integer
          example: 1
        following:
          description: List of all users followed by the User
          type: array
          items: 
            $ref: "#/components/schemas/UserID"
        numberOfFollowing:
          type: integer
          example: 1
        photos:
          description: Stream of Photos uploaded by the User
          type: array
          items: 
            $ref: "#/components/schemas/Photo"
            
    UserID:
        description: The unique identifier of the User
        type: integer
        example: 12345678
        readOnly: true
    
    Username:
        description: The username of the User
        type: string
        example: "wasa.photo"
        pattern: 'ˆ.*?$'
        minLength: 3
        maxLength: 16
      
      
    Photo:
      description: This object represents a single Photo that can be uploaded by a User on WASAPhoto
      type: object
      properties:
        photoId:
          $ref: "#/components/schemas/PhotoID"
        image: 
          description: The image of the Photo 
          type: string
          format: binary
        date:
          description: Date that represents when the Photo was uploaded 
          type: string
          format: date-time
          example: "2020-07-21T17:32:28Z"
        likes:
          description: Number of likes that the Photo has
          type: integer
          example: 1
        comments:
          description: List of all comments posted on the Photo
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        numberOfComments: 
          description: Number of comments that the Photo has
          type: integer
          example: 1
          
          
    PhotoID:
      description: The unique identifier of the Photo
      type: integer
      example: 567
      readOnly: true
          
    Comment:
      description: This object represents a single Comment that can be posted by a User 
        on a Photo uploaded on WASAPhoto
      type: object
      properties:
        commentId:
          $ref: "#/components/schemas/CommentID"
        userId:
          description: user id of the User that posted the Comment
          $ref: "#/components/schemas/UserID"
        date:
          description: Date that represents when the Comment was posted 
          type: string
          format: date-time
          example: "2023-11-02T16:50:30Z"
        message:
          description: The message of the Comment 
          type: string
          example: "This photo is amazing!"
          
    CommentID:
      description: The unique identifier of the Comment
      type: integer
      example: 11111111
      readOnly: true
      
          
        
          
        
        
      
      
          
          
          
          
          
          
      
      
          
          
          
